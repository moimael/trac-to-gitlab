# Sample configuration file, update to meet your needs

[source]

# URL of the XML-RPC trac endpoint
url: http://username:password@example.com/trac/login/xmlrpc


[target]

# Trac to GitLab user mappings
usernames = {
    'trac1': 'git1',
    'trac2': 'git2'
    }

# Fallback user to use if not present in mapping
default_user: bot

# project's path
project_name: foo/bar

# Method to use: api or direct
method: direct

# URL of the GitLab web API (if method = api)
url: https://gitlab.example.com/api/v3

# API access token (if method = api)
access_token: secretsecret

# Uncomment to verify SSL keys (default = no ) (if method = api)
# ssl_verify: yes

# Overwrite existing project's data in the database (if method = direct, default = yes)
overwrite: yes

# database name (if method = direct)
db-name: gitlabhq_production

# database user (if method = direct)
db-user: gitlab

# database password (if method = direct)
# Not set in recent GitLab installation. You need to create a PostgreSQL user for the
# user that runs the migration and map it to the gitlab user in /var/opt/gitlab/postgresql/data/pg_ident.conf
db-password:

# database socket path (if method = direct)
# Override this if not using the Gitlab builtin PostgreSQL, to specify the path
# to the PostgreSQL control socket (e.g. /run/postgresql)
db-path: /var/opt/gitlab/postgresql/

# Path to the gitlab uploads directory (if method = direct)
uploads: /var/opt/gitlab/gitlab-rails/uploads


[wiki]

# Should we migrate the wiki (default = yes)
# migrate: yes

# Comma separated list of authors to exclude (default=trac)
# exclude_authors: trac

# Directory where the wiki pages should be written
target-directory: /tmp/test.wiki/


[issues]

# Should we migrate the issues (default = yes)
# migrate: yes

# If defined, import only these issues
#only_issues: [ 509, 561, 564, 626, 631, 792, 830]
